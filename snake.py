from Bit import *
from framebuf import FrameBuffer, RGB565
import time
import random

begin()

sprite_jabuka = FrameBuffer(bytearray(b'\x00\x00\x00\x00\x6C\xAC\x6C\xAC\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xA8\x00\xA8\x00\x6C\xAC\xA8\x00\xA8\x00\xA8\x00\x00\x00\xA8\x00\xF1\xC7\xF1\xC7\xA8\x00\xF1\xC7\xF1\xC7\xF1\xC7\xA8\x00\xA8\x00\xF1\xC7\xF1\xC7\xF1\xC7\xF1\xC7\xF1\xC7\xF1\xC7\xA8\x00\xA8\x00\xF1\xC7\xF1\xC7\xF1\xC7\xF1\xC7\xF1\xC7\xF1\xC7\xA8\x00\xA8\x00\xF1\xC7\xF1\xC7\xF1\xC7\xF1\xC7\xF1\xC7\xF1\xC7\xA8\x00\xA8\x00\xA8\x00\xF1\xC7\xF1\xC7\xF1\xC7\xF1\xC7\xA8\x00\xA8\x00\x00\x00\x00\x00\xA8\x00\xA8\x00\xA8\x00\xA8\x00\x00\x00\x00\x00'), 8, 8, RGB565) 
sprite_jabuka_transparent = 0

sprite_rome_snake = FrameBuffer(bytearray(b'\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3'), 8, 8, RGB565) 
sprite_rome_snake_transparent = 0

sprite_rome_snake_tail = FrameBuffer(bytearray(b'\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x00\x00\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x00\x00'), 8, 8, RGB565) 
sprite_rome_snake_tail_transparent = 0

sprite_rome_snake_head = FrameBuffer(bytearray(b'\x40\x00\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x40\x00\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x00\x00\x25\xC3\x25\xC3\x00\x00\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83'), 8, 8, RGB565) 
sprite_rome_snake_head_transparent = 16384

sprite_rome_snake_body = FrameBuffer(bytearray(b'\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83'), 8, 8, RGB565) 
sprite_rome_snake_body_transparent = 0

sprite_rome_snake_tail = FrameBuffer(bytearray(b'\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x00\x00\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x00\x00'), 8, 8, RGB565) 
sprite_rome_snake_tail_transparent = 0

sprite_rome_snake_head = FrameBuffer(bytearray(b'\x40\x00\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x40\x00\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x00\x00\x25\xC3\x25\xC3\x00\x00\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83'), 8, 8, RGB565) 
sprite_rome_snake_head_transparent = 16384

sprite_rome_snake_body = FrameBuffer(bytearray(b'\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83'), 8, 8, RGB565) 
sprite_rome_snake_body_transparent = 0

sprite_rome_snake_head_l = FrameBuffer(bytearray(b'\x40\x00\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x00\x00\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x00\x00\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x40\x00\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83'), 8, 8, RGB565) 
sprite_rome_snake_head_l_transparent = 16384

sprite_rome_snake_head_r = FrameBuffer(bytearray(b'\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x40\x00\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x00\x00\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x00\x00\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x40\x00'), 8, 8, RGB565) 
sprite_rome_snake_head_r_transparent = 16384

sprite_rome_snake_head_d = FrameBuffer(bytearray(b'\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x00\x00\x25\xC3\x25\xC3\x00\x00\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x40\x00\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x40\x00'), 8, 8, RGB565) 
sprite_rome_snake_head_d_transparent = 16384

sprite_rome_snake_tail_d = FrameBuffer(bytearray(b'\x00\x00\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x00\x00\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83'), 8, 8, RGB565) 
sprite_rome_snake_tail_d_transparent = 0

sprite_rome_snake_tail_l = FrameBuffer(bytearray(b'\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x00\x00\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x00\x00'), 8, 8, RGB565) 
sprite_rome_snake_tail_l_transparent = 0

sprite_rome_snake_tail_r = FrameBuffer(bytearray(b'\x00\x00\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x00\x00\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83'), 8, 8, RGB565) 
sprite_rome_snake_tail_r_transparent = 0

sprite_rome_snake_body_lr = FrameBuffer(bytearray(b'\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83\x1C\x83'), 8, 8, RGB565) 
sprite_rome_snake_body_lr_transparent = 0

sprite_rome_snake_body_ud = FrameBuffer(bytearray(b'\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83\x1C\x83\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x25\xC3\x1C\x83'), 8, 8, RGB565) 
sprite_rome_snake_body_ud_transparent = 0

snake_body = [(60, 60)]
direction = (0, 0)

score = 0

def move_snake():
    global snake_body, score
    head_x, head_y = snake_body[0]

    head_x += direction[0]
    head_y += direction[1]

    head_x = (head_x // 8) * 8
    head_y = (head_y // 8) * 8

    if head_x < 0:
        head_x = 120
    elif head_x > 120:
        head_x = 0

    if head_y < 0:
        head_y = 120
    elif head_y > 120:
        head_y = 0

    if check_apple_collision(head_x, head_y):
        snake_body.insert(0, (head_x, head_y))
        score += 1
        place_apple()
    else:
        snake_body.insert(0, (head_x, head_y))
        snake_body.pop()

    if (head_x, head_y) in snake_body[1:]:
        game_over()

    display.fill(0)
    draw_snake()
    draw_apple()
    draw_score()
    display.commit()

def draw_snake():
    if len(snake_body) > 0:
        if direction == (0, -8):
            head_sprite = sprite_rome_snake_head
        elif direction == (0, 8):
            head_sprite = sprite_rome_snake_head_d
        elif direction == (-8, 0):
            head_sprite = sprite_rome_snake_head_l
        elif direction == (8, 0):
            head_sprite = sprite_rome_snake_head_r
        else:
            head_sprite = sprite_rome_snake_head

        display.blit(head_sprite, snake_body[0][0], snake_body[0][1], sprite_rome_snake_head_transparent)

    for segment in range(1, len(snake_body) - 1):
        prev_segment = snake_body[segment - 1]
        next_segment = snake_body[segment + 1]

        if prev_segment[0] == next_segment[0]:
            body_sprite = sprite_rome_snake_body_ud
        else:
            body_sprite = sprite_rome_snake_body_lr

        display.blit(body_sprite, snake_body[segment][0], snake_body[segment][1], sprite_rome_snake_body_transparent)

    if len(snake_body) > 1:
        tail_segment = snake_body[-1]
        second_last_segment = snake_body[-2]

        if tail_segment[0] == second_last_segment[0]:
            tail_sprite = sprite_rome_snake_tail if second_last_segment[1] < tail_segment[1] else sprite_rome_snake_tail_d
        else:
            tail_sprite = sprite_rome_snake_tail_l if second_last_segment[0] < tail_segment[0] else sprite_rome_snake_tail_r

        display.blit(tail_sprite, tail_segment[0], tail_segment[1], sprite_rome_snake_tail_transparent)

def draw_score():
    display.text("Score: {}".format(score), 0, 0, 0xFFFF)

def game_over():
    display.fill(0)
    display.text("Game Over!", 40, 60, 0xFFFF)
    display.text("Score: {}".format(score), 40, 80, 0xFFFF)
    display.commit()
    time.sleep(2)
    reset_game()

def reset_game():
    global snake_body, direction, score
    snake_body = [(60, 60)]
    direction = (0, 0)
    score = 0
    place_apple()

def cb_left():
    global direction
    if direction != (8, 0):
        direction = (-8, 0)

buttons.on_press(Buttons.Left, cb_left)

def cb_right():
    global direction
    if direction != (-8, 0):
        direction = (8, 0)

buttons.on_press(Buttons.Right, cb_right)

def cb_down():
    global direction
    if direction != (0, -8):
        direction = (0, 8)

buttons.on_press(Buttons.Down, cb_down)

def cb_up():
    global direction
    if direction != (0, 8):
        direction = (0, -8)

buttons.on_press(Buttons.Up, cb_up)

def cb_fG2Ehex0():
    reset_game()

buttons.on_press(Buttons.A, cb_fG2Ehex0)

apple_x = 0
apple_y = 0

def place_apple():
    global apple_x, apple_y
    while True:
        apple_x = random.randint(0, 120) // 8 * 8
        apple_y = random.randint(0, 120) // 8 * 8
        if (apple_x, apple_y) not in snake_body:
            break

place_apple()

def check_apple_collision(head_x, head_y):
    return head_x == apple_x and head_y == apple_y

def draw_apple():
    display.blit(sprite_jabuka, apple_x, apple_y, sprite_jabuka_transparent)

while True:
    buttons.scan()
    move_snake()
    time.sleep_ms(100)